USE DATABASE SIM_BOM; 
 
CREATE OR REPLACE PROCEDURE BMATHUB_BASE.P_MASTER_TO_BASE()
RETURNS STRING 
LANGUAGE SQL
AS
BEGIN

    --Master item to Base item
    MERGE INTO SIM_BOM.BMATHUB_BASE.T_ITEM_DETAIL_ROOT AS ITEM_ROOT
    USING SIM_BOM.MASTER_DATA.ITEM AS ITEM
    ON ITEM_ROOT.ITEM_ID = ITEM.ITEM_ID
    WHEN MATCHED THEN
        UPDATE SET 
            ITEM_ROOT.ITEM_CLASS_NM = ITEM.ITEM_CLASS_NM,
            ITEM_ROOT.ITEM_DISC = ITEM.ITEM_DISC,
            ITEM_ROOT.DELETE_IND = ITEM.DELETE_IND
    WHEN NOT MATCHED THEN
        INSERT (ITEM_ID, ITEM_CLASS_NM, ITEM_DISC, DELETE_IND)
        VALUES (ITEM.ITEM_ID, ITEM.ITEM_CLASS_NM, ITEM.ITEM_DISC, ITEM.DELETE_IND);

    --Master location to Base location
    MERGE INTO BMATHUB_BASE.T_LOCATION_ROOT AS LR
    USING SIM_BOM.MASTER_DATA.LOCATION AS L
    ON LR.LOCATION_ID = L.LOCATION_ID
    WHEN MATCHED THEN
        UPDATE SET 
            LR.ITEM_ID = L.ITEM_ID,
            LR.ITEM_CLASS_NM = L.ITEM_CLASS_NM
    WHEN NOT MATCHED THEN
        INSERT (ITEM_ID, ITEM_CLASS_NM, LOCATION_ID)
        VALUES(L.ITEM_ID, L.ITEM_CLASS_NM, L.LOCATION_ID);
    
    --Master Orig Bom to Base Orig Bom
    MERGE INTO BMATHUB_BASE.T_ORIG_BOM AS TOB
    USING MASTER_DATA.ORIG_BOM AS MOB
    ON TOB.INPUT_ITEM_ID = MOB.INPUT_ITEM_ID AND TOB.OUTPUT_ITEM_ID = MOB.OUTPUT_ITEM_ID
    WHEN MATCHED THEN
        UPDATE SET
            TOB.ITEM_CLASS_NM = MOB.ITEM_CLASS_NM,
            TOB.OUTPUT_ITEM_ID = MOB.OUTPUT_ITEM_ID,
            TOB.LOC = MOB.LOC
    WHEN NOT MATCHED THEN
        INSERT (INPUT_ITEM_ID, ITEM_CLASS_NM, OUTPUT_ITEM_ID, LOC)
        VALUES (MOB.INPUT_ITEM_ID, MOB.ITEM_CLASS_NM, MOB.OUTPUT_ITEM_ID, MOB.LOC);
    
    RETURN 'Merge completed';
END;

CALL SIM_BOM.BMATHUB_BASE.P_MASTER_TO_BASE();
